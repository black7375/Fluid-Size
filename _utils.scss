// @import '~mathsass/dist/math';
// @import '~sass-unitconverter/unitconverter';

// == Utils ====================================================================
// -- Data Structure -----------------------------------------------------------
@function range($values) {
  $iter-num: 0;
  $range-list: ();

  @if is-num($values) {
    $iter-num: $values;
  }
  @else {
    $iter-num: length($values);
  }

  @for $i from 1 through $iter-num {
    $range-list: append($range-list, $i);
  }
  @return $range-list;
}

@function repeat($value, $size) {
  $repeat-list:();
  @each $i in range($size) {
    $repeat-list: append($repeat-list, $value);
  }
  @return $repeat-list;
}

@function list($args...) {
  $list: ();
  @each $arg in $args {
    $list: append($list, $arg);
  }
  @return $list;
}

// https://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/
@function replace-nth($list, $index, $value) {
  $result: null;

  @if type-of($index) != number {
    @warn "$index: #{quote($index)} is not a number for `replace-nth`.";
  } @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `replace-nth`.";
  } @else if abs($index) > length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `replace-nth`.";
  } @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);

    @for $i from 1 through length($list) {
      @if $i == $index {
        $result: append($result, $value);
      } @else {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}

// https://gist.github.com/Jakobud/ec056b52f3673cc369dc97f2c2428424
@function list-remove($list, $index) {
  $newList: ();
  @for $i from 1 through length($list) {
    @if $i != $index {
      $newList: append($newList, nth($list,$i), 'space');
    }
  }
  @return $newList;
}

// https://hugogiraudel.com/2014/04/28/casting-map-into-list/
@function to-list($value, $keep: 'both') {
  $keep: if(index('keys' 'values', $keep), $keep, 'both');

  @if is-map($value) {
    $keys: ();
    $values: ();

    @each $key, $val in $value {
      $keys: append($keys, $key);
      $values: append($values, $val);
    }

    @if $keep == 'keys' {
      @return $keys;
    } @else if $keep == 'values' {
      @return $values;
    } @else {
      @return zip($keys, $values);
    }
  }

  @return if(type-of($value) != 'list', ($value,), $value);
}

@function to-map($keys, $values) {
  $map: ();

  @each $i in range($keys) {
    $map-value: (nth($keys, $i): nth($values, $i));
    $map: map-merge($map, $map-value);
  }
  @return $map;
}

@function empty-map($x: x) {
  @return map-remove(($x:$x), $x);
}

@function map-index($map, $key-value, $type: 'key') {
  @if      $type == 'key'   {
    @return index(map-keys($map),   $key-value);
  }
  @else if $type == 'value' {
    @return index(map-values($map), $key-value);
  }
  @else if $type == 'map'   {
    @return index($map, to-list($key-value));
  }
}

@function map-nth($map, $n, $type: 'key') {
  @if      $type == 'key'   {
    @return nth(nth($map, $n), 1);
  }
  @else if $type == 'value' {
    @return nth(nth($map, $n), 2);
  }
}

// https://gist.github.com/Jakobud/744b98b629abe018766f6d506a2e92ae
// https://css-tricks.com/snippets/sass/sorting-function/
@function sort-compare($a, $b) {
  @if is-num($a, false) and is-num($b, false) {
    @return $a < $b;
  }

  $order: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9"
          "a" "b" "c" "d" "e" "f" "g" "h" "i" "j"
          "k" "l" "m" "n" "o" "p" "q" "r" "s" "t"
          "u" "v" "w" "x" "y" "z";

  $a: to-lower-case($a + unquote(""));
  $b: to-lower-case($b + unquote(""));

  @for $i from 1 through min(str-length($a), str-length($b)) {
    $char-a: str-slice($a, $i, $i);
    $char-b: str-slice($b, $i, $i);

    @if $char-a and $char-b and index($order, $char-a) != index($order, $char-b) {
      @return index($order, $char-a) < index($order, $char-b);
    }
  }

  @return str-length($a) < str-length($b);
}

@function list-sort($list) {
  $sortedlist: ();
  @while length($list) > 0 {
    $value: nth($list,1);
    @each $item in $list {
      @if sort-compare($item, $value) {
        $value: $item;
      }
    }
    $sortedlist: append($sortedlist, $value, 'space');
    $list: list-remove($list, index($list, $value));
  }
  @return $sortedlist;
}

@function list-sort-index($list) {
  $sortedMap: ();
  @each $i in range($list) {
    $value: nth($list, $i);
    @if map-has-key($sortedMap, $value) {
      $other-i: map-get($sortedMap, $value);
      $i: if(is-list($other-i), append($other-i, $i), ($other-i, $i));
    }
    $sortedMap: map-merge($sortedMap, ($value: $i));
  }

  $sortedMap: map-sort($sortedMap);
  @return flatten(map-values($sortedMap)...);
}

// https://gist.github.com/Jakobud/a0ac11e80a1de453cd86f0d3fc0a1410
@function map-sort($map) {
  $keys: list-sort(map-keys($map));
  $sortedMap: ();
  @each $key in $keys {
    $sortedMap: map-merge($sortedMap, ($key: map-get($map, $key)));
  }
  @return $sortedMap;
}

@function map-sort-values($map) {
  // Transform map to zipped list
  $keys: ();
  $values: ();

  @each $key, $val in $map {
    $keys: append($keys, $key);
    $values: append($values, $val);
  }

  $list: zip($keys, $values);

  $sortedMap: ();
  @while length($list) > 0 {

    // Find smallest pair
    $smallestPair: nth($list, 1);
    @each $pair in $list {
      $value: nth($pair, 2);
      $smallestValue: nth($smallestPair, 2);
      @if $value < $smallestValue {
        $smallestPair: $pair;
      }
    }

    // Add smallest pair to sorted map
    $key: nth($smallestPair, 1);
    $value: nth($smallestPair, 2);
    $sortedMap: map-merge($sortedMap, ($key: $value));

    // Remove from list smallest pair
    $smallestPairIndex: index($list, $smallestPair);
    $newList: ();
    @for $i from 1 through length($list) {
      @if $i != $smallestPairIndex {
        $newList: append($newList, nth($list, $i), "space");
      }
    }
    $list: $newList;
  }

  @return $sortedMap;
}

@function contain($values, $item, $type: 'key') {
  @if      is-list($values) {
    @return index($values, $item) != null;
  }
  @else if is-map($values) {
    @if      $type == 'key' {
      @return map-has-key($values, $item);
    }
    @else if $type == 'value' {
      @return contain(map-values($values), $item);
    }
    @else if $type == 'map' {
      @return map-index($values, $item, 'map') != null;
    }
  }
}

@function flatten($list...) {
  $newList: ();
  @each $value in $list {
    @if is-list($value) {
      @each $deepV in $value {
        $newList: append($newList, $deepV);
      }
    }
    @else {
      $newList: append($newList, $value);
    }
  }
  @return $newList;
}

@function map($values, $function, $type: 'value', $separator: auto) {
  @if      is-list($values) {
    $newList: ();
    @if      $type == 'list' {
      $newList: do-list($values, $function);
    }
    @else if $type == 'value' {
      @each $value in $values {
        $newList: append($newList, do($value, $function), $separator);
      }
    }
    @return $newList;
  }
  @else if is-map($values)  {
    $newMap: ();
    @each $key, $value in $values {
      $newMap: map-merge($newMap, if($type == 'key',
                                     (do($key, $function): $value),
                                     ($key: do($value, $function))
      ));
    }
    @return $newMap;
  }
  @else {
    @return do($values, $function);
  }
}

// -- Math ---------------------------------------------------------------------
@function count-round($number, $count: 1) {
  $digit: pow(10, $count - 1);

  $upper: $number * $digit;
  $round: floor($upper + 0.5);
  @return $round / $digit;
}

// -- Other --------------------------------------------------------------------
@function do($value, $functions...) {
  $result: $value;
  $functions: flatten($functions...);
  @each $function in $functions {
    $result: call($function, $result);
  }
  @return $result;
}

@function do-list($value, $functions...) {
  $result: $value;
  $functions: flatten($functions...);
  @each $function in $functions {
    $result: call($function, $result...);
  }
  @return $result;
}

@function to-unit-converted($value, $unit) {
  @return if(is-num($value, false),
  to-unit($value, $unit), to-unit-data($value, $unit));
}

@function to-unit-data($data, $unit) {
  $new-data: ();
  @if      is-list($data) {
    @each $value in $data {
      $converted: to-unit-converted($value, $unit);
      $new-data: append($new-data, $converted);
    }
  }
  @else if is-map($data) {
    @each $key, $value in $data {
      $converted: to-unit-converted($value, $unit);
      $new-data: map-merge($new-data, ($key: $converted));
    }
  }
  @else {
    @return if(is-num($data, false), to-unit($data, $unit), $data);
  }
  @return $new-data;
}

@function limit-size($size, $min-size, $max-size) {
  @if not is-null($min-size) {
    $size: if($size < $min-size, $min-size, $size);
  }
  @if not is-null($max-size) {
    $size: if($size > $max-size, $max-size, $size);
  }

  @return $size;
}

@function limit-sizes($sizes, $min-size, $max-size) {
  $sizes:    to-unit-data($sizes,    px);
  $min-size: to-unit-data($min-size, px);
  $max-size: to-unit-data($max-size, px);

  $new-sizes: ();
  @each $size in $sizes {
    $new-size: if(is-len($size), limit-size($size, $min-size, $max-size), $size);
    $new-sizes: append($new-sizes, $new-size);
  }
  @return $new-sizes;
}

@function size-break($function, $fluid-unit, $now-size, $next-size,
$now-break, $next-break, $max-size: null) {
  $now-size:   to-unit-data($now-size,   $fluid-unit);
  $next-size:  to-unit-data($next-size,  $fluid-unit);
  $now-break:  to-unit-data($now-break,  $fluid-unit);
  $next-break: to-unit-data($next-break, $fluid-unit);
  $max-size:   to-unit-data($max-size,   $fluid-unit);

  $check-function: $function == 'fluid-size';
  $args: if($check-function,
  list($now-size, $next-size, $now-break, $next-break),
  list($now-size, $next-size, $max-size, $now-break, $next-break));

  $results: ();
  $each-sizes: zip($now-size, $next-size);
  @each $start-size, $end-size in $each-sizes {
    $result: null;
    @if is-len($start-size) and is-len($end-size) {
      $args: replace-nth($args, 1, $start-size);
      $args: replace-nth($args, 2, $end-size  );

      $result: map($args, $function, 'list');
    }
    @else {
      $result: if($check-function, $start-size, $next-break);
    }
    $results: append($results, $result);
  }
  @return $results;
}

@function is-calc($value) {
  @if not is-str($value) {
    @return false;
  }
  @else {
    $str-front:  str-slice($value, 1, 5) == "calc(";
    $str-back:   str-slice($value, str-length($value)) == ")";
    @return $str-front and $str-back;
  }
}

@function replace-size($sizes, $index, $max-size) {
  $size: nth($sizes, $index);
  @return if(is-len($size) or is-calc($size),
             replace-nth($sizes, $index, $max-size), $sizes);
}
