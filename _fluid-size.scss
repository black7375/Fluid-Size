@charset "UTF-8";
@import 'break-points';
@import '~include-media/dist/include-media';
@import '~mathsass/dist/math';
@import '~sass-unitconverter/unitconverter';
@import 'utils';
@import 'options';

// == Fluid Size ===============================================================
$FIRST-BREAK: default !default;

@function zip-responsive() {
  @return zip(
    map-values($screen-distances), map-values($screen-sizes      ),
    map-values($breakpoints     ), map-values($breakpoints-height)
  );
}

// -- Fit Size -----------------------------------------------------------------
// https://github.com/black7375/Fluid-Size/wiki/The-theory-of-font-size-and-readability
@function calc-ppi($screen-width, $screen-height, $screen-size) {
  @return sqrt(pow($screen-width, 2) + pow($screen-height, 2)) / $screen-size;
}

@function calc-dependency($value) {
  $screen-distance: nth($value, 1) * 100;
  $screen-size:     nth($value, 2);
  $screen-width:    num(nth($value, 3));
  $screen-height:   num(nth($value, 4));

  $ppi: calc-ppi($screen-width, $screen-height, $screen-size);
  $dependent-value: $screen-distance * $ppi;
  @return $dependent-value;
}

@function calc-angle($size, $options) {
  @if not is-len($size) {
    @return $size;
  }

  $size:   num(px($size));
  $device: get-option($options, device);
  $target: null;

  @if contain('min' 'max', $device) {
    $values:   zip-responsive();
    @each $value in $values {
      $dependent-value: calc-dependency($value);

      @if $device == 'min' {
        @if (($target == null) or ($target > $dependent-value)) {
          $target: $dependent-value;
        }
      }
      @if $device == 'max' {
        @if (($target == null) or ($target < $dependent-value)) {
          $target: $dependent-value;
        }
      }
    }
  }
  @else {
    $value: list(map-get($screen-distances, $device), map-get($screen-sizes,       $device),
                 map-get($breakpoints,      $device), map-get($breakpoints-height, $device));
    $target: calc-dependency($value);
  }

  $angle: $size * 54 / $target;
  $visual-angle: atan($angle) * (10800 / $PI);
  @return count-round($visual-angle, 2);
}
@function calc-angles($sizes, $options) {
  $angles: ();
  @each $size in $sizes {
    $angles: append($angles, calc-angle($size, $options));
  }
  @return $angles;
}

@function calc-size($visual-angle) {
  $check:       is-num($visual-angle);
  $values:      zip-responsive();
  $break-sizes: ();

  @each $value in $values {
    @if $check {
      $screen-distance: nth($value, 1) * 100;
      $screen-size:     nth($value, 2);
      $screen-width:    num(nth($value, 3));
      $screen-height:   num(nth($value, 4));

      $ppi: calc-ppi($screen-width, $screen-height, $screen-size);
      $angle: tan($PI * $visual-angle / 10800);
      $size: $screen-distance * $angle * $ppi / 54;

      $break-sizes: append($break-sizes, ($size));
    }
    @else {
      $break-sizes: append($break-sizes, ($visual-angle));
    }
  }

  @return $break-sizes;
}

@function fit-size($sizes, $options: empty-map()) {
  // Each Fit Size
  $visual-angle: calc-angles($sizes, $options);
  $scaled-sizes: map($visual-angle, calc-size, $separator: comma);
  $scaled-sizes: to-unit-data($scaled-sizes, px);

  @return if(is-list($sizes), call(zip, $scaled-sizes...), $scaled-sizes);
}

// -- Fluid --------------------------------------------------------------------
// https://www.madebymike.com.au/writing/fluid-type-calc-examples/
@function fluid-rate($start-size, $end-size, $min-screen, $max-screen) {
  @return ($end-size - $start-size) / ($max-screen - $min-screen);
}
@function fluid-basic-size($start-size, $min-screen, $rate) {
  @return $start-size - $rate * $min-screen;
}

@function fluid-size($start-size, $end-size, $min-screen, $max-screen) {
  @if $start-size == $end-size {
    @return $start-size;
  }
  $rate: fluid-rate($start-size, $end-size, $min-screen, $max-screen);
  $basic-size: fluid-basic-size($start-size, $min-screen, $rate);

  $sign: "+";
  @if ($basic-size < 0) {
    $sign: "-";
    $basic-size: abs($basic-size);
  }
  @return calc(#{$rate*100}vw #{$sign} #{$basic-size});
}
@function fluid-sizes($now-sizes, $next-sizes, $now-break, $next-break, $fluid-unit: px) {
  $fluid-sizes: size-break(fluid-size, $fluid-unit,
                           $now-sizes, $next-sizes, $now-break, $next-break);
  @return $fluid-sizes;
}

@function fluid-limit-break($start-size, $end-size, $max-size,
                            $min-screen, $max-screen) {
  @if($start-size == $end-size) {
    @return $min-screen;
  }
  $rate: fluid-rate($start-size, $end-size, $min-screen, $max-screen);
  $basic-size: fluid-basic-size($start-size, $min-screen, $rate);

  $limit-break: ($max-size - $basic-size) / $rate;
  $limit-break: count-round($limit-break, 1);
  @return if($limit-break <= 0px, 0px, $limit-break);
}
@function fluid-limit-breaks($now-sizes, $next-sizes, $max-size,
                             $now-break, $next-break, $fluid-unit: px) {
  $limit-breaks: size-break(fluid-limit-break, $fluid-unit,
                            $now-sizes, $next-sizes, $now-break, $next-break, $max-size);
  @return $limit-breaks;
}

@function fluid-limit-type($first, $last, $now-break, $next-break,
                           $limit-break, $type: 'size') {
  @if $type == 'break' {
    @if $first {
      @return 'pass';
    }

    @if $limit-break <= $now-break {
      @return 'substitution';
    }
    @if $now-break < $limit-break and $limit-break < $next-break {
      @return 'add';
    }
  }

  @if $last and $now-break < $limit-break {
    @return 'add';
  }
  @else {
    @return 'pass';
  }
}
@function fluid-limit-types($now-key, $last-key, $now-break, $next-break,
                            $limit-breaks, $type: 'size') {
  $first: $now-key == $FIRST-BREAK;
  $last:  $now-key == $last-key;

  $limit-types: ();
  @each $limit-break in $limit-breaks {
    $limit-type:  fluid-limit-type($first, $last, $now-break, $next-break, $limit-break, $type);
    $limit-types: append($limit-types, $limit-type);
  }
  @return $limit-types;
}

@mixin fluid-add-break-increase($property, $now-key, $fluid-sizes, $max-size,
                                $limit-breaks, $limit-types, $sorted-index) {
  @include media(">=#{$now-key}") {
    #{$property}: $fluid-sizes;
  }

  $break-size: length($limit-breaks);
  @each $i in range($limit-breaks) {
    $now-index:  nth($sorted-index, $i);
    $next-index: if($i < $break-size, nth($sorted-index, $i + 1), null);

    $now-type:   nth($limit-types,  $now-index);
    $now-limit:  nth($limit-breaks, $now-index);
    $next-limit: if(is-null($next-index), null, nth($limit-breaks, $next-index));

    // now-limit == next-limit => only substitution
    // next-limit is null || now-limit != next-limit => substitution && apply
    @if $now-type == 'add' {
      @if $now-limit == $next-limit {
        $fluid-sizes: replace-size($fluid-sizes, $now-index, $max-size);
      }
      @else if is-null($next-limit) or $now-limit != $next-limit {
        $fluid-sizes: replace-size($fluid-sizes, $now-index, $max-size);
        @include media(">=#{$now-limit}") {
          #{$property}: $fluid-sizes;
        }
      }
    }
  }
}

@mixin fluid-add-break-decrease($property, $now-key, $next-sizes, $fluid-sizes, $max-size,
                                $next-break, $limit-breaks, $limit-types, $sorted-index) {
  @each $i in range($limit-breaks) {
    $index: nth($sorted-index, $i);
    @if nth($limit-types, $index) == 'add' {
      $fluid-sizes: replace-size($fluid-sizes, $index, $max-size);
    }
  }
  @include media(">=#{$now-key}") {
    #{$property}: $fluid-sizes;
  }

  $new-fluid-size: null;
  $break-size: length($limit-breaks);
  @each $i in range($limit-breaks) {
    $now-index:  nth($sorted-index, $i);
    $next-index: if($i < $break-size, nth($sorted-index, $i + 1), null);

    $now-type:   nth($limit-types,  $now-index);
    $now-limit:  nth($limit-breaks, $now-index);
    $next-size:  nth($next-sizes,   $now-index);
    $next-limit: if(is-null($next-index), null, nth($limit-breaks, $next-index));

    // now-limit == next-limit => only substitution
    // next-limit is null || now-limit != next-limit => substitution && apply
    @if $now-type == 'add' {
      $first: $i == 1;
      $last:  is-null($next-limit);
      $continuous: $now-limit == $next-limit;
      @if $first or not $last or not $continuous {
        $new-fluid-size: fluid-size($max-size, $next-size, $now-limit, $next-break);
      }

      @if $continuous {
        $fluid-sizes: replace-size($fluid-sizes, $now-index, $new-fluid-size);
      }
      @else if $last or not $continuous {
        $fluid-sizes: replace-size($fluid-sizes, $now-index, $new-fluid-size);
        @include media(">=#{$now-limit}") {
          #{$property}: $fluid-sizes;
        }
      }
    }
  }
}

@mixin fluid-media-limit($property, $now-key, $now-sizes, $next-sizes, $fluid-sizes, $max-size,
                         $next-break, $limit-breaks, $limit-types) {
  $exist-sub: contain($limit-types, 'substitution');
  $exist-add: contain($limit-types, 'add');
  $sorted-index: null;
  @if (not $exist-sub) and (not $exist-add) {
    //all pass
    @include media(">=#{$now-key}") {
      #{$property}: $fluid-sizes;
    }
  }
  @else {
    $sorted-index: list-sort-index($limit-breaks);
  }

  @if $exist-sub {
    @each $i in range($limit-breaks) {
      $index: nth($sorted-index, $i);
      @if nth($limit-types, $index) == 'substitution' {
        $fluid-sizes: replace-size($fluid-sizes, $index, $max-size);
      }
    }
    @include media(">=#{$now-key}") {
      #{$property}: $fluid-sizes;
    }
  }

  @if $exist-add {
    // now-size  > max-size => now-break(subtitution), add-break(create fluide-size)
    // next-size > max-size => now-break(pass),        add-break(subtitution)
    @if check-sizes($now-sizes, $next-sizes) {
      @include fluid-add-break-increase($property, $now-key, $fluid-sizes, $max-size,
                                        $limit-breaks, $limit-types, $sorted-index);
    }
    @else {
      @include fluid-add-break-decrease($property, $now-key, $next-sizes, $fluid-sizes, $max-size,
                                        $next-break, $limit-breaks, $limit-types, $sorted-index);
    }
  }
}

// -- Medias -------------------------------------------------------------------
@mixin fit-media($property, $now-key, $last-key, $now-sizes, $next-sizes,
                 $now-break, $next-break, $fluid-unit, $min-size, $max-size, $next-key) {
  @if (not is-null($min-size)) or (not is-null($max-size)) {
    $now-sizes:  limit-sizes($now-sizes,  $min-size, $max-size);
    $next-sizes: limit-sizes($next-sizes, $min-size, $max-size);
  }
  $now-sizes:   to-unit-data($now-sizes,  $fluid-unit);
  $next-sizes:  to-unit-data($next-sizes, $fluid-unit);

  // Apply Media
  @if $now-key == $FIRST-BREAK {
    #{$property}: $now-sizes;
  }
  @else {
    @include media(">=#{$now-key}") {
      #{$property}: $now-sizes;
    }
    @if $now-key == $last-key {
      @include media(">=#{$next-key}") {
        #{$property}: $next-sizes;
      }
    }
  }
}

@mixin fluid-media($property, $now-key, $last-key, $now-sizes, $next-sizes,
                   $now-break, $next-break, $fluid-unit, $min-size, $max-size, $limit) {
  $limit-breaks: null;
  $limit-types:  null;
  @if (not is-null($min-size) or not is-null($max-size)) and $limit == 'size' {
    $now-sizes:  limit-sizes($now-sizes,  $min-size, $max-size);
    $next-sizes: limit-sizes($next-sizes, $min-size, $max-size);
  }
  @if not is-null($max-size) {
    $limit-breaks: fluid-limit-breaks($now-sizes,  $next-sizes, $max-size,
                                      $now-break, $next-break);
    $limit-types:  fluid-limit-types($now-key, $last-key, $now-break, $next-break,
                                     $limit-breaks, $limit);
    $max-size:  to-unit-data($max-size,  $fluid-unit);
  }
  $now-sizes:  to-unit-data($now-sizes,  $fluid-unit);
  $next-sizes: to-unit-data($next-sizes, $fluid-unit);
  $fluid-sizes: fluid-sizes($now-sizes, $next-sizes, $now-break, $next-break, $fluid-unit);

  // Apply Media
  @if $now-key == $FIRST-BREAK {
    #{$property}: $now-sizes;
  }

  @if $now-key != $FIRST-BREAK and not is-null($max-size) {
    @include fluid-media-limit($property, $now-key, $now-sizes, $next-sizes, $fluid-sizes,
                               $max-size, $next-break, $limit-breaks, $limit-types);
  }
  @else if $now-key != $FIRST-BREAK {
    @include media(">=#{$now-key}") {
      #{$property}: $fluid-sizes;
    }
  }
}

@mixin media-fluid($property, $devices-sizes, $options: empty-map()) {
  $fit-sizes:         to-unit-data($devices-sizes, px);
  $fluid-breakpoints: map-merge(($FIRST-BREAK: 0px), to-unit-map($breakpoints, px));
  $fluid-breakpoints: map-sort-values($fluid-breakpoints);
  @if not map-has-key($fit-sizes, $FIRST-BREAK) {
    $default-map: ($FIRST-BREAK: $DEAFULT-SIZE);
    $fit-sizes: map-merge($default-map, $fit-sizes);
  }

  // Apply Options
  $fluid-mode: get-option($options,  mode);
  $fluid-unit: get-option($options,  unit);
  $min-size:   get-option($options,   min);
  $max-size:   get-option($options,   max);
  $limit:      get-option($options, limit);

  $first-size: 1;
  $last-size: length($fluid-breakpoints) - 1;
  $last-key:  map-nth($fluid-breakpoints, $last-size);
  @each $i in range($last-size) {
    $now-key:  map-nth($fluid-breakpoints, $i);
    $next-key: map-nth($fluid-breakpoints, $i + 1);

    $now-sizes:   map-get($fit-sizes, $now-key );
    $next-sizes:  map-get($fit-sizes, $next-key);
    $now-break:  map-get($fluid-breakpoints, $now-key );
    $next-break: map-get($fluid-breakpoints, $next-key);

    $args: ($property,  $now-key,    $last-key,   $now-sizes, $next-sizes,
            $now-break, $next-break, $fluid-unit, $min-size,  $max-size  );
    @if      $fluid-mode == 'fluid' {
      @include fluid-media(append($args, $limit)...);
    }
    @else if $fluid-mode == 'fit' {
      @include fit-media(append($args, $next-key)...);
    }
  }
}

@mixin fluid($property, $sizes, $options: empty-map(), $type: 'font') {
  // Preprocessing for $options
  @if not is-map($options) {
    $options: (max-size: $options);
  }
  @if      get-option($options, unit) == each and $type == 'font' {
    $options: map-merge($options, (unit: rem));
  }
  @else if get-option($options, unit) == each and $type ==  'box' {
    $options: map-merge($options, (unit:  px));
  }

  // Validate
  $validate-breakpoints: validate-breakpoints();
  $validate-options:     validate-options($options);

  // Single value to List processing
  @if not is-list($sizes) {
    $sizes: ($sizes, );
  }

  $fit-sizes:     fit-size($sizes, $options);
  $keys:          join($FIRST-BREAK, map-keys($breakpoints));
  $values:        join(($sizes,), $fit-sizes);
  $devices-sizes: to-map($keys, $values);

  @include media-fluid($property, $devices-sizes, $options);
}

// -- Interface ----------------------------------------------------------------
// Font
@mixin font-size($sizes, $options: empty-map()) {
  @include fluid(font-size, $sizes, $options);
}
@mixin line-height($sizes, $options: empty-map()) {
  @include fluid(line-height, $sizes, $options);
}
@mixin text-indent($sizes, $options: empty-map()) {
  @include fluid(text-indent, $sizes, $options);
}
@mixin letter-spacing($sizes, $options: empty-map()) {
  @include fluid(letter-spacing, $sizes, $options);
}
@mixin word-spacing($sizes, $options: empty-map()) {
  @include fluid(word-spacing, $sizes, $options);
}
@mixin tab-size($sizes, $options: empty-map()) {
  @include fluid(tab-size, $sizes, $options);
}

// Box
@mixin width($sizes, $options: empty-map()) {
  @include fluid(width, $sizes, $options, 'box');
}
@mixin height($sizes, $options: empty-map()) {
  @include fluid(height, $sizes, $options, 'box');
}
@mixin border-width($sizes, $options: empty-map()) {
  @include fluid(border-width, $sizes, $options, 'box');
}
@mixin margin($sizes, $options: empty-map()) {
  @include fluid(margin, $sizes, $options, 'box');
}
@mixin margin-top($sizes, $options: empty-map()) {
  @include fluid(margin-top, $sizes, $options, 'box');
}
@mixin margin-bottom($sizes, $options: empty-map()) {
  @include fluid(margin-bottom, $sizes, $options, 'box');
}
@mixin margin-left($sizes, $options: empty-map()) {
  @include fluid(margin-left, $sizes, $options, 'box');
}
@mixin margin-right($sizes, $options: empty-map()) {
  @include fluid(margin-right, $sizes, $options, 'box');
}
@mixin padding($sizes, $options: empty-map()) {
  @include fluid(padding, $sizes, $options, 'box');
}
@mixin padding-top($sizes, $options: empty-map()) {
  @include fluid(padding-top, $sizes, $options, 'box');
}
@mixin padding-bottom($sizes, $options: empty-map()) {
  @include fluid(padding-bottom, $sizes, $options, 'box');
}
@mixin padding-left($sizes, $options: empty-map()) {
  @include fluid(padding-left, $sizes, $options, 'box');
}
@mixin padding-right($sizes, $options: empty-map()) {
  @include fluid(padding-right, $sizes, $options, 'box');
}
